#!/usr/bin/env python3

import sys, argparse, os, re, subprocess
from typing import Tuple
from bs4 import BeautifulSoup
from bs4.element import Tag, NavigableString
from util import die, warn, postData

def parse_problem_url(soup: Tag) -> Tuple[str, str]:
    for fhead in soup.find_all('head'):
        for fmeta in fhead.find_all('meta', attrs={'property': 'og:url'}):  # type: ignore
            problem_url = fmeta.attrs['content']                            # type: ignore
            mo = re.match(r'(.*)/tasks/(.*)', problem_url)
            if not mo:
                die(f'Unexpected problem url: {problem_url}')
            return (mo[1], mo[2])
    die('Failed to find contest url.')
    

def check_code(prog: str) -> None:
    warn('Performing stest ...')
    cp = subprocess.run(['stest', '-p', prog])
    if cp.returncode != 0:
        die('stest failed.  Use --no-check to force submitting.')
    warn('stest done.')

def get_lang_info(srcName: str) -> Tuple[str, str]:
    mo = re.match(r'(?:./)*((.*)\.([^\.]+))$', srcName)
    if not mo:
        die(f'Failed to parse source name {srcName}')
    if not mo[3]:
        die(f'No extension in source name {srcName}')
    li = {'cc': {'prog': './' + mo[2], 'jv': '5001'},
          'py': {'prog': './' + mo[1], 'jv': '5055'},
          'rs': {'prog': 'cargo run --quiet', 'jv': '5054'},
          }
    if mo[3] not in li:
        die(f'Extension {mo[1]} is not supported.')
    return (li[mo[3]]['prog'], li[mo[3]]['jv'])

def check_post_results(page: str) -> bool:
    soup2 = BeautifulSoup(page, 'lxml')
    for title in soup2.find_all('title'):
        if title.string.startswith('My Submissions') or title.string.startswith('自分の提出'): #type: ignore
            return True
    with open('unexp.html', 'w') as wfp:
        print(page, file=wfp)
    msg = 'The returned page (saved in unexp.html) is not as expected.'
    die(msg)

def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--no-check', action='store_true',
        help = 'submit the source without checking')
    parser.add_argument('-s', '--source', default='cans.cc', 
                        help='file to submit.  Default is cans.cc')
    args = parser.parse_args()

    (prog, langID) = get_lang_info(args.source)
    if not args.no_check:
        check_code(prog)

    with open('q.html', 'r', encoding='UTF-8') as fp:
        soup = BeautifulSoup(fp, 'lxml')
    (contest_url, problem_id) = parse_problem_url(soup)

    with open(args.source, 'r', encoding='UTF-8') as fp:
        code = fp.read()

    payload = {'data.TaskScreenName': problem_id,
               'data.LanguageId': langID,
               'sourceCode': code}
    url = contest_url + '/submit'
    warn('Submitting ...')
    page = postData(url, payload)
    check_post_results(page)

    warn('Done.')

main()
